import { argv } from 'node:process';
import Signale from 'signale';
import { render } from '../errors/index.js';
/**
 * Logger
 */
class Logger {
    options;
    /**
     * Enabled
     */
    enabled = false;
    /**
     * Logger instance
     */
    instance;
    /**
     * Verbose
     */
    verbose = false;
    /**
     * Class constructor
     */
    constructor(options = {}) {
        this.options = options;
        this.log = this.log.bind(this);
        this.error = this.error.bind(this);
        this.info = this.info.bind(this);
        this.success = this.success.bind(this);
        this.warn = this.warn.bind(this);
        this.debug = this.debug.bind(this);
        this.scope = this.scope.bind(this);
        this.unscope = this.unscope.bind(this);
        if (!argv.includes(`--silent`)) {
            if (argv.includes(`--log`))
                this.enabled = true;
            if (this.options.logLevel &&
                [`info`, `log`].includes(this.options.logLevel))
                this.enabled = true;
        }
        if (argv.includes(`--verbose`)) {
            this.verbose = true;
            this.options.logLevel === `info`;
        }
        this.instance = new Signale.Signale(this.options);
        this.instance.config({ displayBadge: true, displayLabel: false });
    }
    debug(...messages) {
        if (!this.verbose)
            return this;
        this.instance.debug(...messages);
        return this;
    }
    error(error) {
        render(error);
        return this;
    }
    info(...messages) {
        if (!this.verbose)
            return this;
        this.instance.info(...messages);
        return this;
    }
    log(...messages) {
        if (!this.enabled)
            return this;
        this.instance.log(...messages);
        return this;
    }
    scope(...scopes) {
        if (scopes.length === 0)
            return this;
        this.instance = this.instance.scope(...scopes);
        return this;
    }
    success(...messages) {
        if (!this.enabled)
            return this;
        this.instance.success(...messages);
        return this;
    }
    unscope() {
        this.instance.unscope();
        return this;
    }
    warn(...messages) {
        this.instance.warn(...messages);
        return this;
    }
}
let instance = new Logger();
export const initialize = (options) => {
    instance = new Logger(options);
    instance.log(`logger initialized`);
    return instance;
};
export { instance as default, Logger };
