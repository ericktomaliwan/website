import type { Options as SassLoaderOptions } from 'sass-loader';
import { Extension, type ExtensionApi } from '@roots/bud-framework/extension';
type Options = {
    /**
     * {@link Options.additionalData}
     */
    additionalData: string | undefined;
    /**
     * {@link Options.implementation}
     */
    implementation: SassLoaderOptions[`implementation`] | undefined;
    /**
     * {@link Options.sourceMap}
     */
    sourceMap: SassLoaderOptions[`sourceMap`] | undefined;
    /**
     * {@link Options.warnRuleAsWarning}
     */
    warnRuleAsWarning: SassLoaderOptions[`warnRuleAsWarning`] | undefined;
} & SassLoaderOptions;
export type BudSassApi = {
    /**
     * Import a partial globally
     *
     * @remarks
     * Used to import a partial globally (such as a `variables.scss` file)
     *
     * @example
     * With a single module signifier:
     * ```ts
     * bud.sass.importGlobal('styles/variables.scss')
     * ```
     *
     * @example
     * With an array of module signifiers:
     * ```ts
     * bud.sass.importGlobal([
     *  'styles/variables.scss',
     *  'styles/mixins.scss',
     * ])
     * ```
     *
     * @see {@link options.additionalData}
     */
    importGlobal(data: Array<string> | string): BudSassApi;
    /**
     * Register global stylsheet
     *
     * @remarks
     * Used to register styles which are included globally
     *
     * @example
     * ```ts
     * bud.sass.registerGlobal(`$primary-color: #ff0000;`)
     * ```
     *
     * @see {@link Options.additionalData}
     */
    registerGlobal: (additionalData: Array<string> | string) => BudSassApi;
} & ExtensionApi<BudSassOptions, Options>;
export declare class BudSassOptions extends Extension<Options> {
    /**
     * {@link Options.additionalData}
     */
    additionalData: BudSassApi[`additionalData`] & Options['additionalData'];
    /**
     * {@link Options.additionalData}
     */
    getAdditionalData: BudSassApi[`getAdditionalData`];
    /**
     * {@link Options.implementation}
     */
    getImplementation: BudSassApi[`getImplementation`];
    /**
     * {@link Options.sourceMap}
     */
    getSourceMap: BudSassApi[`getSourceMap`];
    /**
     * {@link Options.implementation}
     */
    implementation: BudSassApi[`implementation`] & Options['implementation'];
    /**
     * {@link Options.additionalData}
     */
    setAdditionalData: BudSassApi[`setAdditionalData`];
    /**
     * {@link Options.implementation}
     */
    setImplementation: BudSassApi[`setImplementation`];
    /**
     * {@link Options.sourceMap}
     */
    setSourceMap: BudSassApi[`setSourceMap`];
    /**
     * {@link Options.sourceMap}
     */
    sourceMap: BudSassApi[`sourceMap`] & Options['sourceMap'];
    /**
     * {@link Options.warnRuleAsWarning}
     */
    warnRuleAsWarning: BudSassApi[`warnRuleAsWarning`] & Options['warnRuleAsWarning'];
    /**
     * {@link Options.warnRuleAsWarning}
     */
    getWarnRuleAsWarning: BudSassApi[`getWarnRuleAsWarning`];
    /**
     * {@link Options.warnRuleAsWarning}
     */
    setWarnRuleAsWarning: BudSassApi[`setWarnRuleAsWarning`];
}
export {};
