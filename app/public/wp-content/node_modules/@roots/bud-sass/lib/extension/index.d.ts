import type { Bud, Item, Items } from '@roots/bud-framework';
import { type BudSassApi, BudSassOptions } from './options.js';
/**
 * Sass configuration
 */
export declare class BudSass extends BudSassOptions {
    loaderPath?: false | string;
    /**
     * {@link Extension.register}
     */
    register({ build, extensions, hooks, postcss, }: Bud): Promise<import("@roots/bud-support/lodash/logger").Logger | undefined>;
    /**
     * Import a partial globally
     *
     * @remarks
     * Used to import a partial globally (such as a `variables.scss` file)
     *
     * @example
     * With a single module signifier:
     * ```ts
     * bud.sass.importGlobal('styles/variables.scss')
     * ```
     *
     * @example
     * With an array of module signifiers:
     * ```ts
     * bud.sass.importGlobal([
     *  'styles/variables.scss',
     *  'styles/mixins.scss',
     * ])
     * ```
     *
     * @see {@link options.additionalData}
     */
    importGlobal(data: Array<string> | string): this;
    /**
     * Register global stylsheet
     *
     * @remarks
     * Used to register styles which are included globally
     *
     * @example
     * ```ts
     * bud.sass.registerGlobal(`$primary-color: #ff0000;`)
     * ```
     *
     * @see {@link Options.additionalData}
     */
    registerGlobal(additionalData: Array<string> | string): this;
    /**
     * Callback for {@link Bud.hooks} `build.resolveLoader.alias`
     */
    onBuildResolveLoaderAlias(aliases?: Record<string, string>): Record<string, string>;
    onBuildResolveExtensions(extensions?: Set<string>): Set<string>;
    withSassLoader(use?: Array<Item | keyof Items | undefined>): Array<Item | keyof Items | undefined>;
}
export { type BudSassApi };
