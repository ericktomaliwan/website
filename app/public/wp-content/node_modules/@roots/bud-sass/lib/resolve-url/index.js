import { __decorate } from "tslib";
import { DynamicOption, Extension } from '@roots/bud-framework/extension';
import { bind, label, options, } from '@roots/bud-framework/extension/decorators';
/**
 * resolve-url-loader configuration
 */
let BudResolveUrl = class BudResolveUrl extends Extension {
    loaderPath;
    /**
     * {@link Extension.register}
     */
    async register({ build, hooks, path }) {
        /** Source loader */
        this.loaderPath = await this.resolve(`resolve-url-loader`, import.meta.url);
        if (!this.loaderPath)
            return this.logger.error(`resolve-url-loader not found`);
        /** Set loader alias */
        hooks.on(`build.resolveLoader.alias`, this.onBuildResolveLoaderAlias);
        /** Setup rule */
        build
            .setLoader(`resolve-url`, this.loaderPath)
            .setItem(`resolve-url`, {
            loader: `resolve-url`,
            options: this.getOptions,
        });
    }
    /**
     * {@link Extension.boot}
     */
    async boot({ build }) {
        build.rules.sass.setUse(this.withResolveLoader);
        build.rules[`sass-module`].setUse(this.withResolveLoader);
    }
    /**
     * Callback for {@link Bud.hooks} `build.resolveLoader.alias`
     */
    onBuildResolveLoaderAlias(aliases = {}) {
        if (!this.loaderPath)
            return aliases;
        aliases[`resolve-url-loader`] = this.loaderPath;
        return aliases;
    }
    withResolveLoader(use) {
        if (!this.loaderPath)
            return use;
        const index = use.findIndex(item => (typeof item === `string` && item.includes(`postcss`)) ||
            (typeof item === `object` && item.ident?.includes(`postcss`)));
        if (!(index > 0))
            return use;
        return [
            ...use.slice(0, index + 1),
            `resolve-url`,
            ...use.slice(index + 1),
        ];
    }
};
__decorate([
    bind
], BudResolveUrl.prototype, "register", null);
__decorate([
    bind
], BudResolveUrl.prototype, "boot", null);
__decorate([
    bind
], BudResolveUrl.prototype, "onBuildResolveLoaderAlias", null);
__decorate([
    bind
], BudResolveUrl.prototype, "withResolveLoader", null);
BudResolveUrl = __decorate([
    label(`@roots/bud-sass/resolve-url`),
    options({
        root: DynamicOption.make(({ path }) => path(`@src`)),
        sourceMap: true,
    })
], BudResolveUrl);
export default BudResolveUrl;
