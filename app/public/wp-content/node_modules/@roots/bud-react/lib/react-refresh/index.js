import { __decorate } from "tslib";
import RefreshPlugin from '@pmmmwh/react-refresh-webpack-plugin';
import { DynamicOption, Extension, } from '@roots/bud-framework/extension';
import { bind, development, label, options, } from '@roots/bud-framework/extension/decorators';
import omit from '@roots/bud-support/omit';
/**
 * @pmmmwh/react-refresh-webpack-plugin configuration
 */
let BudReactRefresh = class BudReactRefresh extends Extension {
    /**
     * {@link Extension.configAfter}
     */
    async configAfter(bud) {
        if (!bud.isDevelopment)
            return;
        if (!(`hot` in bud.server.enabledMiddleware))
            return;
        if (!this.compilerExtension) {
            const signifier = bud.swc?.enabled
                ? `@roots/bud-react/swc-refresh`
                : bud.typescript?.enabled && bud.typescript.babel === false
                    ? `@roots/bud-react/typescript-refresh`
                    : bud.babel?.enabled || bud.typescript?.babel === true
                        ? `@roots/bud-react/babel-refresh`
                        : false;
            if (signifier === false) {
                return;
            }
            await bud.extensions.add(signifier);
            this.setCompilerExtension(bud.extensions.get(signifier));
            this.logger.info(`Registered compiler extension for BudReactRefresh`, this.compilerExtension.label);
        }
    }
    /**
     * {@link Extension.make}
     */
    async make(_bud, options) {
        return new RefreshPlugin(omit(options, [`compilerExtension`]));
    }
    /**
     * Configure {@link RefreshPlugin}
     *
     * @example
     * Add react-refresh-webpack-plugin
     *
     * ```ts
     * bud.react.refresh(true)
     * ```
     *
     * @example
     * Remove react-refresh-webpack-plugin
     *
     * ```ts
     * bud.react.refresh(false)
     * ```
     *
     * @example
     * Configure react-refresh-webpack-plugin
     *
     * ```ts
     * bud.react.refresh({
     *   overlay: true,
     * })
     * ```
     *
     * @remarks
     * Configuration takes place during the `config.after` event
     */
    configure(userOptions) {
        if (userOptions === false || !this.app.isDevelopment) {
            this.enable(false);
            return;
        }
        this.enable(true);
        this.app.hooks.action(`config.after`, async () => {
            this.setOptions(userOptions);
        });
        return this;
    }
};
__decorate([
    bind
], BudReactRefresh.prototype, "configAfter", null);
__decorate([
    bind
], BudReactRefresh.prototype, "make", null);
__decorate([
    bind
], BudReactRefresh.prototype, "configure", null);
BudReactRefresh = __decorate([
    label(`@roots/bud-react/react-refresh`),
    options({
        compilerExtension: undefined,
        esModule: DynamicOption.make(({ context }) => context.manifest?.type === `module`),
        overlay: false,
    }),
    development
], BudReactRefresh);
export default BudReactRefresh;
