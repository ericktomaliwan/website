import { __decorate } from "tslib";
import { bind } from '@roots/bud-support/decorators/bind';
import { Hooks } from '../base/base.js';
/**
 * Event hooks
 */
export class EventHooks extends Hooks {
    async get(id, ...value) {
        if (!(id in this.store) || !this.store[id].length)
            return this.app;
        for await (const action of this.store[id]) {
            this.logger.info(`running ${id}`);
            try {
                await action(...value);
                await this.app.resolvePromises();
            }
            catch (error) {
                this.logger.error(`problem running ${id} callback: ${error.message ?? error}`);
                throw error;
            }
        }
        return this.app;
    }
    set(id, ...input) {
        if (!(id in this.store))
            this.store[id] = [];
        input.map(value => {
            this.logger.info(`registered ${id} callback`);
            this.store[id].push(value);
        });
        return this.app;
    }
}
__decorate([
    bind
], EventHooks.prototype, "get", null);
__decorate([
    bind
], EventHooks.prototype, "set", null);
