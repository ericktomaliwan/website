import { __decorate } from "tslib";
import { Bud } from '@roots/bud-framework';
import { bind } from '@roots/bud-support/decorators/bind';
import { BudError } from '@roots/bud-support/errors';
import get from '@roots/bud-support/get';
import isFunction from '@roots/bud-support/isFunction';
import isObject from '@roots/bud-support/isObject';
import isUndefined from '@roots/bud-support/isUndefined';
import logger, {} from '@roots/bud-support/logger';
import set from '@roots/bud-support/set';
import DynamicOption, { isValue as isDynamicOption, } from '@roots/bud-support/value';
export class Extension {
    options;
    get app() {
        return this._app();
    }
    enabled = true;
    meta = {
        boot: false,
        buildAfter: false,
        buildBefore: false,
        compilerDone: false,
        configAfter: false,
        register: false,
    };
    constructor(app) {
        this._app = () => app;
        this._options = this.options ? { ...this.options } : {};
        delete this.options;
        Object.defineProperty(this, `options`, {
            get: this.getOptions.bind(this),
        });
    }
    catch(error) {
        const label = this.label ?? this.constructor?.name ?? `unknown_extension`;
        throw BudError.normalize(error, {
            docs: new URL(`https://bud.js.org/docs/extensions`),
            issue: new URL(`https://github.com/roots/bud/search?q=is:issue+${label} in:title`),
            name: label,
            thrownBy: import.meta.url,
        });
    }
    disable() {
        this.enabled = false;
    }
    done() {
        return this.app;
    }
    enable(enabled = true) {
        this.logger.log(enabled ? `enabled` : `disabled`);
        if (enabled instanceof Bud) {
            this.enabled = true;
            return this;
        }
        this.enabled = enabled;
        return this;
    }
    getOption(key) {
        return get(this.getOptions(), key);
    }
    get = this.getOption;
    getOptions() {
        return Object.entries(this._options).reduce((acc, [key, value]) => {
            if (isUndefined(value))
                return acc;
            if (!isObject(value))
                return { ...acc, [key]: value };
            const unwrapped = isDynamicOption(value)
                ? value.get()(this.app)
                : value;
            if (isUndefined(unwrapped))
                return acc;
            return { ...acc, [key]: unwrapped };
        }, {});
    }
    async import(signifier, context, options = {
        bustCache: false,
        raw: false,
    }) {
        return await this.app.module
            .import(signifier, context, options)
            .catch(this.catch);
    }
    isEnabled() {
        return `when` in this
            ? this.when(this.app, this.getOptions())
            : this.enabled;
    }
    get logger() {
        const scopes = [];
        this.app.isChild && scopes.push(this.app.label);
        this.label && scopes.push(this.label);
        return logger.scope(...scopes);
    }
    async resolve(signifier, context) {
        return await this.app.module.resolve(signifier, context);
    }
    setOption(key, valueOrCallback) {
        if (isFunction(valueOrCallback)) {
            const resolved = valueOrCallback(this.get(key));
            set(this._options, key, resolved);
            this.logger.info(`Set option:`, key, `=>`, resolved);
            return this;
        }
        set(this._options, key, valueOrCallback);
        this.logger.info(`Set option:`, key, `=>`, valueOrCallback);
        return this;
    }
    set = this.setOption;
    setOptions(value) {
        this.logger.info(`Set options:`, value);
        this._options = value;
        return this;
    }
    async execute(key) {
        await this.app.resolvePromises();
        if (key === `make`) {
            if (!this.isEnabled())
                return false;
            if (!isUndefined(this.apply)) {
                this.logger.log(`Produced hybrid compiler plugin / bud extension:`, this.label);
                this.logger.info(this);
                return this;
            }
            if (!isUndefined(this.plugin)) {
                const plugin = new this.plugin({ ...this.getOptions() });
                this.logger.log(`Produced compiler plugin:`, this.label);
                this.logger.info(plugin);
                return plugin;
            }
            if (!isUndefined(this.make)) {
                const plugin = await this.make(this.app, { ...this.getOptions() });
                this.logger.log(`Produced make plugin:`, this.label);
                this.logger.info(plugin);
                return plugin;
            }
            return false;
        }
        if (isUndefined(this[key]))
            return false;
        if (this.meta[key] === true)
            return false;
        this.meta[key] = true;
        if ([`buildAfter`, `buildBefore`, `configAfter`].includes(key) &&
            !this.isEnabled())
            return false;
        this.logger.log(`Executing:`, key);
        await this[key](this.app);
        await this.app.resolvePromises();
        return true;
    }
}
__decorate([
    bind
], Extension.prototype, "catch", null);
__decorate([
    bind
], Extension.prototype, "disable", null);
__decorate([
    bind
], Extension.prototype, "done", null);
__decorate([
    bind
], Extension.prototype, "enable", null);
__decorate([
    bind
], Extension.prototype, "getOption", null);
__decorate([
    bind
], Extension.prototype, "getOptions", null);
__decorate([
    bind
], Extension.prototype, "import", null);
__decorate([
    bind
], Extension.prototype, "isEnabled", null);
__decorate([
    bind
], Extension.prototype, "resolve", null);
__decorate([
    bind
], Extension.prototype, "setOption", null);
__decorate([
    bind
], Extension.prototype, "setOptions", null);
__decorate([
    bind
], Extension.prototype, "execute", null);
export { DynamicOption, isDynamicOption };
