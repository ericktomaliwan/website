import { Extension, type ExtensionApi as ExtensionApi } from '@roots/bud-framework/extension';
import Plugin from 'stylelint-webpack-plugin';
export type Options = {
    cache: Plugin.Options[`cache`];
    cacheLocation: Plugin.Options[`cacheLocation`];
    config: Plugin.Options[`config`];
    configFile: Plugin.Options[`configFile`];
    context: Plugin.Options[`context`];
    extensions: Plugin.Options[`extensions`];
    failOnError: Plugin.Options[`failOnError`];
    failOnWarning: Plugin.Options[`failOnWarning`];
    files: Plugin.Options[`files`];
    fix: Plugin.Options[`fix`];
    formatter: Plugin.Options[`formatter`];
    lintDirtyModulesOnly: Plugin.Options[`lintDirtyModulesOnly`];
    stylelintPath: Plugin.Options[`stylelintPath`];
    threads: Plugin.Options[`threads`];
} & Plugin.Options & Record<string, unknown>;
export type Api = {
    extends(config: ((configs: Api[`config`][`extends`]) => Api[`config`][`extends`]) | Api[`config`][`extends`]): Api;
    getPlugins(): Api[`config`][`plugins`];
    getRules(): Api[`config`][`rules`];
    plugins: Options[`config`][`plugins`];
    rules: Options[`config`][`rules`];
    setPlugins(plugins: ((plugins: Options[`config`][`plugins`]) => Options[`config`][`plugins`]) | Options[`config`][`plugins`]): Api;
    setRules(rules: ((rules: Options[`config`][`rules`]) => Options[`config`][`rules`]) | Options[`config`][`rules`]): Api;
} & ExtensionApi<BudStylelintPublicApi, Options>;
export declare class BudStylelintPublicApi extends Extension<Options, Plugin> {
    /**
     * {@link Options.cache}
     */
    cache: Options[`cache`];
    /**
     * {@link Options.cache}
     */
    getCache: Api[`getCache`];
    /**
     * {@link Options.cache}
     */
    setCache: Api[`setCache`];
    /**
     * {@link Options.cacheLocation}
     */
    cacheLocation: Options[`cacheLocation`];
    /**
     * {@link Options.cacheLocation}
     */
    getCacheLocation: Api[`getCacheLocation`];
    /**
     * {@link Options.cacheLocation}
     */
    setCacheLocation: Api[`setCacheLocation`];
    /**
     * {@link Options.config}
     */
    config: Api[`config`];
    /**
     * {@link Options.config}
     */
    getConfig: Api[`getConfig`];
    /**
     * {@link Options.config}
     */
    setConfig: Api[`setConfig`];
    /**
     * {@link Options.configFile}
     */
    configFile: Api[`configFile`];
    /**
     * {@link Options.configFile}
     */
    getConfigFile: Api[`getConfigFile`];
    /**
     * {@link Options.configFile}
     */
    setConfigFile: Api[`setConfigFile`];
    /**
     * {@link Options.context}
     */
    context: Api[`context`];
    /**
     * {@link Options.context}
     */
    getContext: Api[`getContext`];
    /**
     * {@link Options.context}
     */
    setContext: Api[`setContext`];
    /**
     * {@link Options.extensions}
     */
    extensions: Api[`extensions`];
    /**
     * {@link Options.extensions}
     */
    getExtensions: Api[`getExtensions`];
    /**
     * {@link Options.extensions}
     */
    setExtensions: Api[`setExtensions`];
    /** @todo conflict with {@link BudStylelint.failOnError} */
    /**
     * {@link Options.failOnError}
     */
    getFailOnError: Api[`getFailOnError`];
    /**
     * {@link Options.failOnError}
     */
    setFailOnError: Api[`setFailOnError`];
    /** @todo conflict with {@link BudStylelint.failOnWarning} */
    /**
     * {@link Options.failOnWarning}
     */
    getFailOnWarning: Api[`getFailOnWarning`];
    /**
     * {@link Options.failOnWarning}
     */
    setFailOnWarning: Api[`setFailOnWarning`];
    /**
     * {@link Options.files}
     */
    files: Api[`files`];
    /**
     * {@link Options.files}
     */
    getFiles: Api[`getFiles`];
    /**
     * {@link Options.files}
     */
    setFiles: Api[`setFiles`];
    /** @todo conflict with {@link BudStylelint.fix} */
    /**
     * {@link Options.fix}
     */
    getFix: Api[`getFix`];
    /**
     * {@link Options.fix}
     */
    setFix: Api[`setFix`];
    /**
     * {@link Options.formatter}
     */
    formatter: Api[`formatter`];
    /**
     * {@link Options.formatter}
     */
    getFormatter: Api[`getFormatter`];
    /**
     * {@link Options.formatter}
     */
    setFormatter: Api[`setFormatter`];
    /**
     * {@link Options.lintDirtyModulesOnly}
     */
    lintDirtyModulesOnly: Api[`lintDirtyModulesOnly`];
    /**
     * {@link Options.lintDirtyModulesOnly}
     */
    getLintDirtyModulesOnly: Api[`getLintDirtyModulesOnly`];
    /**
     * {@link Options.lintDirtyModulesOnly}
     */
    setLintDirtyModulesOnly: Api[`setLintDirtyModulesOnly`];
    /**
     * {@link Options.threads}
     */
    threads: Api[`threads`];
    /**
     * {@link Options.threads}
     */
    getThreads: Api[`getThreads`];
    /**
     * {@link Options.threads}
     */
    setThreads: Api[`setThreads`];
    /**
     * Stylelint plugins
     *
     * @example
     * ```js
     * console.log(bud.stylelint.plugins)
     * ```
     */
    get plugins(): Api[`config`][`plugins`];
    set plugins(plugins: Api[`config`][`plugins`]);
    /**
     * Get stylelint plugins
     *
     * @example
     * ```js
     * console.log(bud.stylelint.getPlugins())
     * ```
     */
    getPlugins(): string | import("stylelint", { with: { "resolution-mode": "require" } }).Plugin | (string | import("stylelint", { with: { "resolution-mode": "require" } }).Plugin)[];
    /**
     * Set stylelint config plugins
     *
     * @example
     * ```js
     * bud.stylelint.setPlugins([])
     * ```
     *
     * @example
     * ```js
     * bud.stylelint.setPlugins(plugins => [...plugins, plugin])
     * ```
     */
    setPlugins(plugins: ((plugins: Options[`config`][`plugins`]) => Options[`config`][`plugins`]) | Options[`config`][`plugins`]): this;
    /**
     * Stylelint rules
     *
     * @example
     * ```js
     * console.log(bud.stylelint.rules)
     * ```
     */
    get rules(): Api[`config`][`rules`];
    set rules(rules: Api[`config`][`rules`]);
    /**
     * Get stylelint rules
     *
     * @example
     * ```js
     * console.log(bud.stylelint.getRules())
     * ```
     */
    getRules(): {
        [ruleName: string]: any;
    };
    /**
     * Set stylelint config rules
     *
     * @example
     * ```js
     * bud.stylelint.setRules({'no-descending-specificity': null})
     * ```
     *
     * @example
     * ```js
     * bud.stylelint.setRules(rules => ({
     *   ...rules,
     *  'no-descending-specificity': null
     * }))
     * ```
     */
    setRules(rules: ((rules: Options[`config`][`rules`]) => Options[`config`][`rules`]) | Options[`config`][`rules`]): this;
    /**
     * {@link Options.stylelintPath}
     */
    stylelintPath: Api[`stylelintPath`];
    /**
     * {@link Options.stylelintPath}
     */
    getStylelintPath: Api[`getStylelintPath`];
    /**
     * {@link Options.stylelintPath}
     */
    setStylelintPath: Api[`setStylelintPath`];
    /**
     * Extend config
     *
     * @example
     * ```js
     * bud.stylelint.extends([`@roots/bud-stylelint/config`])
     * ```
     *
     * @example
     * ```js
     * bud.stylelint.extends(configs => [...configs, '@roots/bud-stylelint/config`])
     * ```
     */
    extends(configs: ((configs: Api[`config`][`extends`]) => Api[`config`][`extends`]) | Api[`config`][`extends`]): this;
}
