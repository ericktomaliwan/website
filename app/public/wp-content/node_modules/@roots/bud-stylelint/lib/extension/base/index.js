import { __decorate } from "tslib";
import { DynamicOption, Extension, } from '@roots/bud-framework/extension';
import { bind, options } from '@roots/bud-framework/extension/decorators';
import Plugin from 'stylelint-webpack-plugin';
let BudStylelintPublicApi = class BudStylelintPublicApi extends Extension {
    /**
     * Stylelint plugins
     *
     * @example
     * ```js
     * console.log(bud.stylelint.plugins)
     * ```
     */
    get plugins() {
        return this.config?.plugins;
    }
    set plugins(plugins) {
        this.setConfig((config = {}) => ({ ...config, plugins }));
    }
    /**
     * Get stylelint plugins
     *
     * @example
     * ```js
     * console.log(bud.stylelint.getPlugins())
     * ```
     */
    getPlugins() {
        return this.plugins;
    }
    /**
     * Set stylelint config plugins
     *
     * @example
     * ```js
     * bud.stylelint.setPlugins([])
     * ```
     *
     * @example
     * ```js
     * bud.stylelint.setPlugins(plugins => [...plugins, plugin])
     * ```
     */
    setPlugins(plugins) {
        this.setConfig((config = {}) => {
            return typeof plugins === `function`
                ? { ...config, plugins: plugins(config.plugins) }
                : { ...config, plugins };
        });
        return this;
    }
    /**
     * Stylelint rules
     *
     * @example
     * ```js
     * console.log(bud.stylelint.rules)
     * ```
     */
    get rules() {
        return this.config?.rules;
    }
    set rules(rules) {
        this.setConfig((config = {}) => {
            return { ...config, rules: { ...config.rules, ...rules } };
        });
    }
    /**
     * Get stylelint rules
     *
     * @example
     * ```js
     * console.log(bud.stylelint.getRules())
     * ```
     */
    getRules() {
        return this.rules;
    }
    /**
     * Set stylelint config rules
     *
     * @example
     * ```js
     * bud.stylelint.setRules({'no-descending-specificity': null})
     * ```
     *
     * @example
     * ```js
     * bud.stylelint.setRules(rules => ({
     *   ...rules,
     *  'no-descending-specificity': null
     * }))
     * ```
     */
    setRules(rules) {
        this.setConfig((config = {}) => {
            return typeof rules === `function`
                ? { ...config, rules: rules(config.rules) }
                : { ...config, rules: { ...(config.rules ?? {}), ...rules } };
        });
        return this;
    }
    /**
     * Extend config
     *
     * @example
     * ```js
     * bud.stylelint.extends([`@roots/bud-stylelint/config`])
     * ```
     *
     * @example
     * ```js
     * bud.stylelint.extends(configs => [...configs, '@roots/bud-stylelint/config`])
     * ```
     */
    extends(configs) {
        this.setConfig((current = {}) => {
            return typeof configs === `function`
                ? { ...current, extends: configs(current.extends) }
                : { ...current, extends: configs };
        });
        return this;
    }
};
__decorate([
    bind
], BudStylelintPublicApi.prototype, "getPlugins", null);
__decorate([
    bind
], BudStylelintPublicApi.prototype, "setPlugins", null);
__decorate([
    bind
], BudStylelintPublicApi.prototype, "getRules", null);
__decorate([
    bind
], BudStylelintPublicApi.prototype, "setRules", null);
__decorate([
    bind
], BudStylelintPublicApi.prototype, "extends", null);
BudStylelintPublicApi = __decorate([
    options({
        cache: DynamicOption.make(({ context }) => !context.ci && context.cache !== false),
        cacheLocation: DynamicOption.make(({ cache, path }) => path(cache.cacheDirectory, `stylelint.json`)),
        cacheStrategy: `content`,
        config: undefined,
        configFile: undefined,
        context: DynamicOption.make(({ path }) => path(`@src`)),
        failOnError: DynamicOption.make(({ isProduction }) => isProduction),
        failOnWarning: false,
        files: undefined,
        fix: false,
        formatter: undefined,
        lintDirtyModulesOnly: false,
        stylelintPath: undefined,
        threads: false,
    })
], BudStylelintPublicApi);
export { BudStylelintPublicApi };
