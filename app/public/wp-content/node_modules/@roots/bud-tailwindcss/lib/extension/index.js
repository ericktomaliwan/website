import { __decorate } from "tslib";
import { join } from 'node:path';
import { Extension } from '@roots/bud-framework/extension';
import { bind, dependsOn, expose, label, } from '@roots/bud-framework/extension/decorators';
import isString from '@roots/bud-support/isString';
import { BudTailwindOptionsApi, } from './options.js';
/**
 * TailwindCSS configuration
 */
let BudTailwindCss = class BudTailwindCss extends BudTailwindOptionsApi {
    /**
     * {@link Extension.boot}
     */
    async boot(bud) {
        if (!bud.postcss) {
            return this.catch(`@roots/bud-postcss is required to run @roots/bud-tailwindcss`);
        }
        const nesting = await this.resolve(join(`tailwindcss`, `nesting`, `index.js`), import.meta.url);
        if (!nesting) {
            this.catch(`tailwindcss/nesting not found in node_modules`);
        }
        const tailwindcss = await this.resolve(`tailwindcss`, import.meta.url);
        if (!tailwindcss) {
            this.catch(`tailwindcss not found in node_modules`);
        }
        bud.postcss
            .setPlugin(`nesting`, nesting)
            .setPlugin(`tailwindcss`, [tailwindcss])
            .setPluginOptions(`env`, {
            features: {
                [`nesting-rules`]: false,
            },
        })
            .use([`import`, `nesting`, `tailwindcss`, `env`]);
        this.logger.log(`postcss configured for tailwindcss`);
        /**
         * Add tailwind config to webpack cache dependencies
         */
        bud.hooks.on(`build.cache.buildDependencies`, paths => {
            if (isString(this.configPath)) {
                paths.tailwind = [this.configPath];
                this.logger.log(`tailwind config added to webpack build dependencies`);
            }
            return paths;
        });
    }
    /**
     * {@link Extension.configAfter}
     */
    async configAfter(bud) {
        bud.postcss.setPluginOptions(`tailwindcss`, 
        // @ts-ignore
        this.editedConfig ? this.resolveConfig() : this.configPath);
    }
    /**
     * {@link Extension.register}
     */
    async register() {
        await this.sourceConfig();
    }
};
__decorate([
    bind
], BudTailwindCss.prototype, "boot", null);
__decorate([
    bind
], BudTailwindCss.prototype, "configAfter", null);
__decorate([
    bind
], BudTailwindCss.prototype, "register", null);
BudTailwindCss = __decorate([
    label(`@roots/bud-tailwindcss`),
    dependsOn([`@roots/bud-postcss`]),
    expose(`tailwind`)
], BudTailwindCss);
export { BudTailwindCss };
