import type { Modules } from '@roots/bud-framework';
import type { Compiler } from '@roots/bud-framework/config';
import type { ApplyPluginConstructor } from '@roots/bud-framework/extension/decorators/plugin';
import type * as Model from '@roots/bud-framework/extension/types';
import { Bud } from '@roots/bud-framework';
import { type Logger } from '@roots/bud-support/logger';
import DynamicOption, { isValue as isDynamicOption } from '@roots/bud-support/value';
export declare class Extension<Options extends Model.OptionsInterface = Model.OptionsInterface, Plugin extends Model.ApplyPlugin = Model.ApplyPlugin> implements Model.BudExtension<Options, Plugin> {
    _app: () => Model.BudExtension<Options, Plugin>[`app`];
    _options: Partial<Model.InternalOptions<Options>>;
    dependsOn?: Set<keyof Modules & string>;
    dependsOnOptional?: Set<`${keyof Modules & string}`>;
    label?: `${keyof Modules & string}`;
    plugin?: ApplyPluginConstructor;
    options: Options;
    apply?(compiler: Compiler): unknown | void;
    boot?(app: Bud): Promise<unknown | void>;
    buildAfter?(app: Bud): Promise<unknown | void>;
    buildBefore?(app: Bud): Promise<unknown | void>;
    configAfter?(app: Bud): Promise<unknown | void>;
    when?(bud: Bud, options?: Options): boolean;
    get app(): Bud;
    enabled: boolean;
    meta: Model.Meta;
    constructor(app: Bud);
    catch(error: Error | string): never;
    disable(): void;
    done(): Bud;
    enable(enabled?: boolean | Bud): this;
    getOption<K extends string>(key: K): Options[K];
    get: <K extends string>(key: K) => Options[K];
    getOptions(): Options;
    import<T = any>(signifier: string, context: string, options?: {
        bustCache?: boolean;
        raw?: boolean;
    }): Promise<T | undefined>;
    isEnabled(): boolean;
    get logger(): Logger;
    make?(app: Bud, options?: Options): Promise<Plugin>;
    register?(app: Bud): Promise<any>;
    resolve(signifier: string, context: string): Promise<false | string>;
    setOption<K extends string>(key: K, valueOrCallback: Model.OptionCallbackValue<Options, K>): this;
    set: <K extends string>(key: K, valueOrCallback: Model.OptionCallbackValue<Options, K>) => this;
    setOptions(value: Partial<Model.InternalOptions<Options>>): this;
    execute(key: `${keyof Model.Meta & string}` | `make`): Promise<boolean | import("@roots/bud-framework/extension/decorators/plugin").ApplyPlugin | Plugin | this>;
}
export type { Accessor, ApplyPlugin, BudExtension, Constructor, ExtensionApi, Getter, InternalOptions, Meta, Option, OptionCallback, OptionCallbackValue, OptionsInterface, Setter, WithOptions, } from '@roots/bud-framework/extension/types';
export { DynamicOption, isDynamicOption };
