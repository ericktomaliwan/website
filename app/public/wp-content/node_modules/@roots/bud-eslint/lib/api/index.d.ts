import type { Options as EslintPluginOptions } from 'eslint-webpack-plugin';
import { Extension, type ExtensionApi as ExtensionApi } from '@roots/bud-framework/extension';
import Plugin from 'eslint-webpack-plugin';
export type Options = {
    cache: EslintPluginOptions['cache'];
    cacheLocation: EslintPluginOptions['cacheLocation'];
    context: EslintPluginOptions['context'];
    eslintPath: EslintPluginOptions['eslintPath'];
    extensions: EslintPluginOptions['extensions'];
    failOnError: EslintPluginOptions['failOnError'];
    failOnWarning: EslintPluginOptions['failOnWarning'];
    fix: EslintPluginOptions['fix'];
    formatter: EslintPluginOptions['formatter'];
    lintDirtyModulesOnly: EslintPluginOptions['lintDirtyModulesOnly'];
    overrideConfig: EslintPluginOptions['overrideConfig'];
    resolvePluginsRelativeTo: EslintPluginOptions['resolvePluginsRelativeTo'];
    threads: EslintPluginOptions['threads'];
    useEslintrc: EslintPluginOptions['useEslintrc'];
} & EslintPluginOptions & Record<string, unknown>;
export type Api = {
    config: Options[`overrideConfig`];
    extends(config: ((configs: Api[`overrideConfig`][`extends`]) => Api[`overrideConfig`][`extends`]) | Api[`overrideConfig`][`extends`]): Api;
    getConfig(): Api[`overrideConfig`];
    getPlugins(): Api[`overrideConfig`][`plugins`];
    getRules(): Api[`overrideConfig`][`rules`];
    plugins: Options[`overrideConfig`][`plugins`];
    rules: Options[`overrideConfig`][`rules`];
    setConfig(config: Api[`overrideConfig`]): Api;
    setPlugins(plugins: ((plugins: Options[`overrideConfig`][`plugins`]) => Options[`overrideConfig`][`plugins`]) | Options[`overrideConfig`][`plugins`]): Api;
    setRules(rules: ((rules: Options[`overrideConfig`][`rules`]) => Options[`overrideConfig`][`rules`]) | Options[`overrideConfig`][`rules`]): Api;
} & ExtensionApi<BudEslintPublicApi, Options>;
export declare class BudEslintPublicApi extends Extension<Options, Plugin> {
    /**
     * {@link Options.cache}
     */
    cache: Options['cache'];
    /**
     * {@link Options.cacheLocation}
     */
    cacheLocation: Options['cacheLocation'];
    /**
     * {@link Options.context}
     */
    context: Api['context'];
    /**
     * {@link Options.eslintPath}
     */
    eslintPath: Api['eslintPath'];
    /**
     * {@link Options.extensions}
     */
    extensions: Api['extensions'];
    /**
     * {@link Options.failOnError}
     */
    failOnError: Api['failOnError'];
    /**
     * {@link Options.formatter}
     */
    formatter: Api['formatter'];
    /**
     * {@link Options.cache}
     */
    getCache: Api['getCache'];
    /**
     * {@link Options.cacheLocation}
     */
    getCacheLocation: Api['getCacheLocation'];
    /**
     * {@link Options.context}
     */
    getContext: Api['getContext'];
    /**
     * {@link Options.eslintPath}
     */
    getEslintPath: Api['getEslintPath'];
    /**
     * {@link Options.extensions}
     */
    getExtensions: Api['getExtensions'];
    /**
     * {@link Options.failOnError}
     */
    getFailOnError: Api['getFailOnError'];
    /**
     * {@link Options.failOnWarning}
     */
    getFailOnWarning: Api['getFailOnWarning'];
    /**
     * {@link Options.fix}
     */
    getFix: Api['getFix'];
    /**
     * {@link Options.formatter}
     */
    getFormatter: Api['getFormatter'];
    /**
     * {@link Options.lintDirtyModulesOnly}
     */
    getLintDirtyModulesOnly: Api['getLintDirtyModulesOnly'];
    /** @todo conflict with {@link BudEslint.fix} */
    /**
     * {@link Options.overrideConfig}
     */
    getOverrideConfig: Api['getOverrideConfig'];
    /**
     * {@link Options.resolvePluginsRelativeTo}
     */
    getResolvePluginsRelativeTo: Api['getResolvePluginsRelativeTo'];
    /**
     * {@link Options.threads}
     */
    getThreads: Api['getThreads'];
    /**
     * {@link Options.useEslintRc}
     */
    getUseEslintrc: Api['getUseEslintrc'];
    /**
     * {@link Options.lintDirtyModulesOnly}
     */
    lintDirtyModulesOnly: Api['lintDirtyModulesOnly'];
    /**
     * {@link Options.overrideConfig}
     */
    overrideConfig: Api['overrideConfig'];
    /**
     * {@link Options.resolvePluginsRelativeTo}
     */
    resolvePluginsRelativeTo: Api['resolvePluginsRelativeTo'];
    /**
     * {@link Options.cache}
     */
    setCache: Api['setCache'];
    /**
     * {@link Options.cacheLocation}
     */
    setCacheLocation: Api['setCacheLocation'];
    /**
     * {@link Options.context}
     */
    setContext: Api['setContext'];
    /**
     * {@link Options.eslintPath}
     */
    setEslintPath: Api['setEslintPath'];
    /**
     * {@link Options.extensions}
     */
    setExtensions: Api['setExtensions'];
    /**
     * {@link Options.failOnError}
     */
    setFailOnError: Api['setFailOnError'];
    /**
     * {@link Options.failOnWarning}
     */
    setFailOnWarning: Api['setFailOnWarning'];
    /**
     * {@link Options.fix}
     */
    setFix: Api['setFix'];
    /**
     * {@link Options.formatter}
     */
    setFormatter: Api['setFormatter'];
    /**
     * {@link Options.lintDirtyModulesOnly}
     */
    setLintDirtyModulesOnly: Api['setLintDirtyModulesOnly'];
    /**
     * {@link Options.overrideConfig}
     */
    setOverrideConfig: Api['setOverrideConfig'];
    /**
     * {@link Options.resolvePluginsRelativeTo}
     */
    setResolvePluginsRelativeTo: Api['setResolvePluginsRelativeTo'];
    /**
     * {@link Options.threads}
     */
    setThreads: Api['setThreads'];
    /**
     * {@link Options.useEslintRc}
     */
    setUseEslintrc: Api['setUseEslintrc'];
    /**
     * {@link Options.threads}
     */
    threads: Api['threads'];
    /**
     * {@link Options.useEslintRc}
     */
    useEslintrc: Api['useEslintrc'];
    /**
     * Eslint plugins
     *
     * @example
     * ```js
     * console.log(bud.eslint.plugins)
     * ```
     */
    get plugins(): Api[`overrideConfig`][`plugins`];
    set plugins(plugins: Api[`overrideConfig`][`plugins`]);
    /**
     * Eslint rules
     *
     * @example
     * ```js
     * console.log(bud.eslint.rules)
     * ```
     */
    get rules(): Api[`overrideConfig`][`rules`];
    set rules(rules: Api[`overrideConfig`][`rules`]);
    /**
     * {@link Options.overrideConfig}
     */
    get config(): import("eslint").Linter.Config<import("eslint").Linter.RulesRecord, import("eslint").Linter.RulesRecord>;
    /**
     * Extend config
     *
     * @example
     * ```js
     * bud.eslint.extends(['@roots/eslint-config'])
     * ```
     *
     * @example
     * ```js
     * bud.eslint.extends(configs => [...configs, '@roots/eslint-config'])
     * ```
     */
    extends(config: ((configs: Api[`overrideConfig`][`extends`]) => Api[`overrideConfig`][`extends`]) | Api[`overrideConfig`][`extends`]): this;
    /**
     * {@link Options.overrideConfig}
     */
    getConfig(): import("eslint").Linter.Config<import("eslint").Linter.RulesRecord, import("eslint").Linter.RulesRecord>;
    /**
     * Get eslint plugins
     *
     * @example
     * ```js
     * console.log(bud.eslint.getPlugins())
     * ```
     */
    getPlugins(): string[];
    /**
     * Get eslint rules
     *
     * @example
     * ```js
     * console.log(bud.eslint.getRules())
     * ```
     */
    getRules(): Partial<import("eslint").Linter.RulesRecord>;
    /**
     * {@link Options.overrideConfig}
     */
    setConfig(config: ((config: Api['overrideConfig']) => Api['overrideConfig']) | Api['overrideConfig']): this;
    /**
     * Set eslint config plugins
     *
     * @example
     * ```js
     * bud.eslint.setPlugins({
     *   'no-console': 'off',
     * })
     * ```
     *
     * @example
     * ```js
     * bud.eslint.setPlugins(plugins => ({
     *   ...plugins,
     *  'no-console': 'off',
     * }))
     * ```
     */
    setPlugins(plugins: ((plugins: Options[`overrideConfig`][`plugins`]) => Options[`overrideConfig`][`plugins`]) | Options[`overrideConfig`][`plugins`]): this;
    /**
     * Set eslint config rules
     *
     * @example
     * ```js
     * bud.eslint.setRules({
     *   'no-console': 'off',
     * })
     * ```
     *
     * @example
     * ```js
     * bud.eslint.setRules(rules => ({
     *   ...rules,
     *  'no-console': 'off',
     * }))
     * ```
     */
    setRules(rules: ((rules: Options[`overrideConfig`][`rules`]) => Options[`overrideConfig`][`rules`]) | Options[`overrideConfig`][`rules`]): this;
}
