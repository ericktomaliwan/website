import { __decorate } from "tslib";
import { Extension, } from '@roots/bud-framework/extension';
import { bind } from '@roots/bud-framework/extension/decorators';
import Plugin from 'eslint-webpack-plugin';
export class BudEslintPublicApi extends Extension {
    /**
     * Eslint plugins
     *
     * @example
     * ```js
     * console.log(bud.eslint.plugins)
     * ```
     */
    get plugins() {
        return this.overrideConfig.plugins;
    }
    set plugins(plugins) {
        this.setOverrideConfig((config = {}) => {
            return { ...config, plugins: [...(config?.plugins ?? []), ...plugins] };
        });
    }
    /**
     * Eslint rules
     *
     * @example
     * ```js
     * console.log(bud.eslint.rules)
     * ```
     */
    get rules() {
        return this.overrideConfig.rules;
    }
    set rules(rules) {
        this.setOverrideConfig((config = {}) => {
            return { ...config, rules: { ...config.rules, ...rules } };
        });
    }
    /**
     * {@link Options.overrideConfig}
     */
    get config() {
        return this.overrideConfig;
    }
    /**
     * Extend config
     *
     * @example
     * ```js
     * bud.eslint.extends(['@roots/eslint-config'])
     * ```
     *
     * @example
     * ```js
     * bud.eslint.extends(configs => [...configs, '@roots/eslint-config'])
     * ```
     */
    extends(config) {
        this.setConfig((current = {}) => {
            return typeof config === `function`
                ? { ...current, extends: config(current.extends) }
                : { ...current, extends: [...(current?.extends ?? []), ...config] };
        });
        return this;
    }
    /**
     * {@link Options.overrideConfig}
     */
    getConfig() {
        return this.config;
    }
    /**
     * Get eslint plugins
     *
     * @example
     * ```js
     * console.log(bud.eslint.getPlugins())
     * ```
     */
    getPlugins() {
        return this.plugins;
    }
    /**
     * Get eslint rules
     *
     * @example
     * ```js
     * console.log(bud.eslint.getRules())
     * ```
     */
    getRules() {
        return this.rules;
    }
    /**
     * {@link Options.overrideConfig}
     */
    setConfig(config) {
        this.setOverrideConfig(config);
        return this;
    }
    /**
     * Set eslint config plugins
     *
     * @example
     * ```js
     * bud.eslint.setPlugins({
     *   'no-console': 'off',
     * })
     * ```
     *
     * @example
     * ```js
     * bud.eslint.setPlugins(plugins => ({
     *   ...plugins,
     *  'no-console': 'off',
     * }))
     * ```
     */
    setPlugins(plugins) {
        this.setOverrideConfig((config = {}) => {
            return typeof plugins === `function`
                ? { ...config, plugins: plugins(config.plugins) }
                : { ...config, plugins: [...(config?.plugins ?? []), ...plugins] };
        });
        return this;
    }
    /**
     * Set eslint config rules
     *
     * @example
     * ```js
     * bud.eslint.setRules({
     *   'no-console': 'off',
     * })
     * ```
     *
     * @example
     * ```js
     * bud.eslint.setRules(rules => ({
     *   ...rules,
     *  'no-console': 'off',
     * }))
     * ```
     */
    setRules(rules) {
        this.setOverrideConfig((config = {}) => {
            return typeof rules === `function`
                ? { ...config, rules: rules(config.rules) }
                : { ...config, rules: { ...(config.rules ?? {}), ...rules } };
        });
        return this;
    }
}
__decorate([
    bind
], BudEslintPublicApi.prototype, "extends", null);
__decorate([
    bind
], BudEslintPublicApi.prototype, "getPlugins", null);
__decorate([
    bind
], BudEslintPublicApi.prototype, "getRules", null);
__decorate([
    bind
], BudEslintPublicApi.prototype, "setPlugins", null);
__decorate([
    bind
], BudEslintPublicApi.prototype, "setRules", null);
