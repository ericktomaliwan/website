import { __decorate } from "tslib";
import BudCommand from '@roots/bud/cli/commands';
import { Option } from '@roots/bud-support/clipanion';
import { bind } from '@roots/bud-support/decorators/bind';
/**
 * {@link BudCommand}
 */
export class BudEslintCommand extends BudCommand {
    /**
     * {@link BudCommand.paths}
     */
    static paths = [[`lint`, `js`], [`eslint`]];
    /**
     * {@link BudCommand.usage}
     */
    static usage = BudCommand.Usage({
        category: `tool`,
        description: `Run eslint on source files`,
        examples: [[`Run eslint on source files`, `$0 eslint`]],
    });
    options = Option.Proxy({ name: `eslint passthrough options` });
    /**
     * {@link BudCommand.execute}
     */
    async execute() {
        await this.makeBud();
        await this.bud.run();
        const eslintrc = Object.values(this.bud.context.files).find(file => file.name.includes(`eslintrc`) ||
            file.name.includes(`eslint.config`))?.path;
        await this.run([`eslint`, `bin`, `eslint.js`], this.options, [
            `--ext`,
            `.js,.jsx,.ts,.tsx`,
            ...(eslintrc ? [`--config`, eslintrc] : []),
            this.bud.relPath(`@src`),
        ]);
    }
}
__decorate([
    bind
], BudEslintCommand.prototype, "execute", null);
